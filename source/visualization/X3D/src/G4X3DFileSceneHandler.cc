//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// G4X3DFileSceneHandler.cc
// Satoshi Tanaka & Yasuhide Sawada


//#define DEBUG_X3D_SCENE

#include <fstream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <cmath>
#include <sstream>
#include <iomanip>

#include "globals.hh"
#include "G4VPhysicalVolume.hh"
#include "G4LogicalVolume.hh"
#include "G4VisManager.hh"
#include "G4Point3D.hh"
#include "G4VisAttributes.hh"
#include "G4VModel.hh"
#include "G4Scene.hh"
#include "G4Polyhedron.hh"
#include "G4Box.hh"
#include "G4Cons.hh"
#include "G4Polyline.hh"
#include "G4Trd.hh"
#include "G4Tubs.hh"
#include "G4Text.hh"
#include "G4Circle.hh"
#include "G4Square.hh"

#include "G4X3DFileSceneHandler.hh"
#include "G4X3DFileViewer.hh"
#include "G4X3DFile.hh"

// CONST

const char  X3DFILE_DEST_DIR    [] = "G4X3DFILE_DEST_DIR";
const int   DEFAULT_MAX_X3D_FILE_NUM = 100 ;

/*
    "<head>\n"
    "    <meta content=\"Generated by X3D driver of GEANT4\" name=\"generator\"/>\n"
    "</head>\n"
*/

G4X3DFileSceneHandler::G4X3DFileSceneHandler(G4X3DFile& system, const G4String& name) :
	G4VSceneHandler(system, fSceneIdCount++, name),
	fSystem(system),
	fFlagDestOpen( false ),
	fPVPickable  ( false ),
        fDest()
{
	// destination directory
  	fX3DFileDestDir = system.fX3DFileDestDir; 
        if( !fX3DFileDestDir.empty() && fX3DFileDestDir[fX3DFileDestDir.size()-1]!='/' ) {
          fX3DFileDestDir += '/';
        }

        fX3DFileNamePrefix = system.fX3DFileNamePrefix;

	// maximum number of g4.prim files in the dest directory
	fX3DFileMaxNum = system.fX3DFileMaxNum;
	if( fX3DFileMaxNum < 1   ) { fX3DFileMaxNum = 1;   }
	if( fX3DFileMaxNum > 100 ) { fX3DFileMaxNum = 100; }

	// PV name pickability
        if( system.fX3DFilePickable != 0 ) {
          SetPVPickability ( true ) ;
	} 

	// PV Transparency
	SetPVTransparency ();

        if( system.fX3DFileFormat == "xml" ) {
          fX3DFileNameExtension = ".x3d";
          fX3DFileGreeting =
           "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
           "<!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 3.3//EN\" \"http://www.web3d.org/specifications/x3d-3.3.dtd\">\n\n"
           "<X3D profile='Immersive' version='3.3'"
           "  xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance'"
           "  xsd:noNamespaceSchemaLocation =' http://www.web3d.org/specifications/x3d-3.3.xsd '>\n\n";
          fX3DFileClosing = "</X3D>\n";
        } else { // html
          fX3DFileNameExtension = ".html";

         std::ostringstream greeting;
         greeting 
           << "<html>\n"
           << "<head>\n"
           << "  <title>Geant4 event</title>\n"
           << "  <script type='text/javascript' src='" << system.fX3DFileJsURL << "'> </script>\n"
           << "  <link rel='stylesheet' type='text/css' href='" <<system.fX3DFileCssURL << "'></link>\n"
           <<   "</head> \n"
           <<   "<body> \n";
         G4int width  = system.fX3DFileWidth;
         if( width<64 ) width = 64;
         if( width>10000 ) width = 10000;
         G4int height = system.fX3DFileHeight;
         if( height<32 ) height = 32;
         if( height>10000 ) height = 10000;
         greeting
           <<   "  <X3D profile='Immersive' version='3.3' width='" << width << "px' height='" << height << "px'>\n";
         fX3DFileGreeting = greeting.str();

         fX3DFileClosing =
           "</X3D>\n"
           "</body>\n"
           "</html>\n";
        }
}


G4X3DFileSceneHandler::~G4X3DFileSceneHandler()
{
#if defined DEBUG_X3D_SCENE
  if (G4VisManager::GetVerbosity() >= G4VisManager::errors)
	G4cout << "***** ~G4X3DFileSceneHandler" << G4endl;
#endif 
	X3DEndModeling();
}


#define  G4X3DSCENEHANDLER   G4X3DFileSceneHandler
#define  IS_OPENED   this->isOpened() 
#include "G4X3DSceneHandlerFunc.icc"
#undef   IS_OPENED
#undef   G4X3DSCENEHANDLER

void G4X3DFileSceneHandler::openFileStream()
{
	fDest.open(fX3DFileName) ;
	fFlagDestOpen =  true ;
}

void G4X3DFileSceneHandler::closeFileStream()
{
	fDest.close();
	fFlagDestOpen = false ;
}

void G4X3DFileSceneHandler::openFile()
{
	// g4_00.x3d, g4_01.x3d, ..., g4_MAX_FILE_INDEX.x3d
	const int MAX_FILE_INDEX = fX3DFileMaxNum - 1 ;

	// Determine X3D file name
	for( int i = 0 ; i < fX3DFileMaxNum ; i++) { 

		// Message in the final execution
		if( i == MAX_FILE_INDEX ) 
		{
		  if (G4VisManager::GetVerbosity() >= G4VisManager::errors) {
		    G4cout << "==========================================="   << G4endl; 
		    G4cout << "WARNING MESSAGE from X3DFILE driver:     "   << G4endl;
		    G4cout << "  This file name is the final one in the   "   << G4endl;
		    G4cout << "  automatic updation of the output file name." << G4endl; 
		    G4cout << "  You may overwrite existing files, i.e.   "   << G4endl; 
		    G4cout << "  "<< fX3DFileNamePrefix << "XX" << fX3DFileNameExtension << " .                               "   << G4endl;
		    G4cout << "==========================================="   << G4endl; 
		  }
		}

		// re-determine file name as G4X3DFILE_DEST_DIR/g4_XX.x3d 
		std::ostringstream filename;
                if( strlen(fX3DFileDestDir)>0 ) {
                  filename << fX3DFileDestDir;
                  if( fX3DFileDestDir[strlen(fX3DFileDestDir)-1]!='/' ) {
                    filename << "/";
                  }
                }
                filename << fX3DFileNamePrefix << std::setw(2) << std::setfill('0') << i << fX3DFileNameExtension;
		fX3DFileName = filename.str();

		// check validity of the file name
		std::ifstream  fin ; 
		fin.open(fX3DFileName) ;
		if(!fin) { 
			// new file	
			fin.close();  
			break; 
		} else { 
			// already exists (try next) 
			fin.close(); 
		} 

	} // for 

        // open the stream and write the header
        this->openFileStream();
        fDest << fX3DFileGreeting;
        time_t t = time(0);
        struct tm tmbuf;
        char stime[256];
        std::strftime(stime, sizeof(stime)-1, "%F %T", ::localtime_r(&t, &tmbuf));
        fDest
          << "<head>\n"
          << "\t<meta name='title' content='"<< fX3DFileName << "'/>\n"
          << "\t<meta name='description' content='Geant4 visualization scene'/>\n"
          << "\t<meta name='created' content='" << stime << "'/>\n"
          << "\t<meta name='reference' content='http://geant4.cern.ch'/>\n"
          << "\t<meta name='subject' content='Geant4, event'/>\n"
          << "</head>\n";
        fDest << "<Scene>\n<Group>\n";
}


void G4X3DFileSceneHandler::rewindFile()
{
  if( this->isOpened() ) {
    // reopen with the same name and write the header
    this->closeFileStream();
    this->openFileStream();
    fDest << fX3DFileGreeting;
  }
}

void G4X3DFileSceneHandler::closeFile()
{
	// close X3D file, but first write the footer
	fDest << "</Group>\n</Scene>\n";
        fDest << fX3DFileClosing;
	this->closeFileStream();
	if (G4VisManager::GetVerbosity() >= G4VisManager::errors)
	      G4cout << "*** X3D File  " << fX3DFileName << "  is generated." << G4endl;	
}

G4int G4X3DFileSceneHandler::fSceneIdCount = 0;
